/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package mn.micrometer.rxjava3

import io.micrometer.core.annotation.Timed
import io.micronaut.core.async.annotation.SingleResult
import io.micronaut.http.annotation.*
import io.micronaut.http.client.annotation.Client
import io.micronaut.runtime.Micronaut
import io.reactivex.rxjava3.core.Flowable
import io.reactivex.rxjava3.core.Maybe
import io.reactivex.rxjava3.core.Single
import org.reactivestreams.Publisher
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import java.util.concurrent.ConcurrentHashMap

fun main(args: Array<String>) {
    Micronaut.build()
        .args(*args)
        .packages("mn.micrometer.rxjava3")
        .start()
}

data class Book(val id: Long, val title: String)

interface BookApi {
    @Get("/{id}")
    @Timed //Doesn't work as Single cannot be converted to Mono
    fun get(id: Long): Single<Book>

    @Get("/search")
    @Timed //Doesn't work as Maybe cannot be converted to Mono
    fun search(@QueryValue("book_title") bookTitle: String): Maybe<Book>

    @Get
    @Timed //Works as Flowable implements Publisher
    fun get(): Flowable<Book>

    @Post
    @SingleResult
    @Timed //Works as return type is Publisher
    fun post(book: Book): Publisher<Book>

    @Put
    @SingleResult
    @Timed //Works as return type is Publisher
    fun put(book: Book): Publisher<Book>
}

@Client("/books")
interface BookClient: BookApi

@Controller("books")
class BookController: BookApi {
    private val books = ConcurrentHashMap<Long, Book>().also { it[1L] = Book(1L, "Test") }

    override fun get(id: Long): Single<Book> {
        return books[id]?.let { Single.just(it) } ?: Single.error(Throwable("not found"))
    }

    override fun get(): Flowable<Book> = Flowable.fromIterable(books.values)

    override fun search(bookTitle: String): Maybe<Book> {
        return books.values.find { it.title == bookTitle }?.let {
            Maybe.just(it)
        } ?: Maybe.empty()
    }

    override fun post(book: Book): Publisher<Book> {
        books[book.id] = book
        return Flux.just(book)
    }

    override fun put(book: Book): Publisher<Book> {
        books[book.id] = book
        return Mono.just(book)
    }

}